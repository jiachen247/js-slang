/* tslint:disable */
/** To generate this, see the /metacircular-interpreter folder. */

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export default function createParser() {
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,2],$V1=[1,3],$V2=[1,5],$V3=[1,9],$V4=[1,23],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,19],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,21],$Vd=[1,20],$Ve=[1,22],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,33],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,34],$Vq=[5,9],$Vr=[5,6,8,9,13,15,21,22,23,24,26,28,29,32,33,37,46,52,55,56,57,58,60,61,62,63,69],$Vs=[1,46],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[1,61],$VG=[1,62],$VH=[1,63],$VI=[1,64],$VJ=[1,65],$VK=[1,67],$VL=[1,68],$VM=[6,9,17,25,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,53,54,65],$VN=[2,49],$VO=[1,79],$VP=[2,70],$VQ=[1,89],$VR=[2,79],$VS=[6,9,17,25,32,33,34,35,36,38,39,40,41,42,43,44,45,47,53,54,65],$VT=[17,47],$VU=[6,9,17,25,32,33,38,39,40,41,42,43,44,45,47,53,54,65],$VV=[6,9,17,25,38,39,40,41,47,53,54,65],$VW=[6,9,17,25,38,39,40,41,42,43,44,45,47,53,54,65],$VX=[8,13,15,32,33,37,46,52,55,56,57,58,60,61,62,63,69];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,";":6,"statement":7,"{":8,"}":9,"ifstatement":10,"whilestatement":11,"forstatement":12,"function":13,"identifier":14,"(":15,"identifiers":16,")":17,"vardefinition":18,"assignment":19,"expression":20,"return":21,"break":22,"continue":23,"var":24,"=":25,"if":26,"else":27,"while":28,"for":29,"forinitialiser":30,"forfinaliser":31,"+":32,"-":33,"*":34,"/":35,"%":36,"!":37,"&&":38,"||":39,"===":40,"!==":41,">":42,"<":43,">=":44,"<=":45,"[":46,"]":47,".":48,"constants":49,"expressions":50,"pairs":51,"new":52,"?":53,":":54,"FLOAT_NUMBER":55,"INT_NUMBER":56,"true":57,"false":58,"quotedstring":59,"emptylist":60,"EmptyString":61,"QuotedString":62,"QuotedStringEscape":63,"nonemptyexpressions":64,",":65,"nonemptypairs":66,"pair":67,"nonemptyidentifiers":68,"Identifier":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:";",8:"{",9:"}",13:"function",15:"(",17:")",21:"return",22:"break",23:"continue",24:"var",25:"=",26:"if",27:"else",28:"while",29:"for",32:"+",33:"-",34:"*",35:"/",36:"%",37:"!",38:"&&",39:"||",40:"===",41:"!==",42:">",43:"<",44:">=",45:"<=",46:"[",47:"]",48:".",52:"new",53:"?",54:":",55:"FLOAT_NUMBER",56:"INT_NUMBER",57:"true",58:"false",60:"emptylist",61:"EmptyString",62:"QuotedString",63:"QuotedStringEscape",65:",",69:"Identifier"},
productions_: [0,[3,2],[4,0],[4,1],[4,2],[4,3],[7,1],[7,1],[7,1],[7,8],[7,1],[7,2],[7,2],[7,3],[7,2],[7,2],[18,5],[19,3],[10,11],[10,9],[11,7],[12,10],[30,2],[30,1],[30,2],[30,1],[31,1],[31,1],[31,0],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,4],[20,3],[20,3],[20,1],[20,1],[20,6],[20,3],[20,3],[20,4],[20,6],[20,5],[20,7],[20,5],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[59,1],[59,1],[59,1],[59,2],[59,2],[50,1],[50,0],[64,3],[64,1],[51,1],[51,0],[66,3],[66,1],[67,3],[16,1],[16,0],[68,3],[68,1],[14,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 70: case 74: case 79:
 this.$ = []; 
break;
case 4:
 this.$ = pair($$[$0-1], $$[$0]); 
break;
case 5:
 this.$ = $$[$0-1]; 
break;
case 9:

			this.$ = {
				tag: 'var_definition',
				variable: $$[$0-6],
				value: {
					tag: 'function_definition',
					name: $$[$0-6],
					parameters: $$[$0-4],
					body: $$[$0-1],
					line: yylineno,
					location: {
						start_line: _$[$0-7].first_line,
						start_col: _$[$0-7].first_column,
						end_line: _$[$0].first_line,
						end_col: _$[$0].first_column
					}
				},
				line: yylineno
			};
		
break;
case 13:

			this.$ = {
				tag: 'return_statement',
				expression: $$[$0-1],
				line: yylineno
			};
		
break;
case 14:

			this.$ = {
				tag: 'break_statement',
				line: yylineno
			};
		
break;
case 15:

			this.$ = {
				tag: 'continue_statement',
				line: yylineno
			};
		
break;
case 16:

			this.$ = {
				tag: 'var_definition',
				variable: $$[$0-3],
				value: $$[$0-1],
				line: yylineno
			};
		
break;
case 17:

			if ($$[$0-2].tag === 'variable') {
				this.$ = {
					tag: 'assignment',
					variable: $$[$0-2],
					value: $$[$0],
					line: yylineno
				};

			} else if ($$[$0-2].tag === 'property_access') {
				this.$ = {
					tag: 'property_assignment',
					object: $$[$0-2].object,
					property: $$[$0-2].property,
					value: $$[$0],
					line: yylineno
				};

			} else {
				error('parse error in line ' + yylineno + ": " + yytext);
			}
		
break;
case 18:

			this.$ = {
				tag: 'if',
				predicate: $$[$0-8],
				consequent: $$[$0-5],
				alternative: $$[$0-1],
				line: yylineno
			};
		
break;
case 19:

			this.$ = {
				tag: 'if',
				predicate: $$[$0-6],
				consequent: $$[$0-3],
				alternative: pair($$[$0], []),
				line: yylineno
			};
		
break;
case 20:

			this.$ = {
				tag: 'while',
				predicate: $$[$0-4],
				statements: $$[$0-1],
				line: yylineno
			};
		
break;
case 21:

			this.$ = {
				tag: 'for',
				initialiser: $$[$0-7],
				predicate: $$[$0-6],
				finaliser: $$[$0-4],
				statements: $$[$0-1],
				line: yylineno
			};
		
break;
case 29: case 30: case 31: case 32: case 33: case 39: case 40: case 41: case 42: case 43: case 44:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'variable',
					name: $$[$0-1],
					line: yylineno
				},
				operands: [$$[$0-2], [$$[$0], []]],
				line: yylineno
			};
		
break;
case 34: case 35:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'variable',
					name: $$[$0-1],
					line: yylineno
				},
				operands: [0, [$$[$0], []]],
				line: yylineno
			};
		
break;
case 36:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'variable',
					name: $$[$0-1],
					line: yylineno
				},
				operands: [$$[$0], []],
				line: yylineno
			};
		
break;
case 37: case 38:

			this.$ = {
				tag: 'boolean_op',
				operator: $$[$0-1],
				operands: [$$[$0-2], [$$[$0], []]],
				line: yylineno
			};
		
break;
case 45:

			this.$ = {
				tag: 'property_access',
				object: $$[$0-3],
				property: $$[$0-1],
				line: yylineno
			};
		
break;
case 46:

			this.$ = {
				tag: 'property_access',
				object: $$[$0-2],
				property: $$[$0],
				line: yylineno
			};
		
break;
case 47:
this.$ = $$[$0-1];
break;
case 49:

			this.$ = {
				tag: 'variable',
				name: $$[$0],
				line: yylineno
			};
		
break;
case 50:

			this.$ = {
				tag: 'application',
				operator: $$[$0-4],
				operands: $$[$0-1],
				line: yylineno
			};
		
break;
case 51:

			this.$ = {
				tag: 'arrayinit',
				elements: $$[$0-1],
				line: yylineno
			};
		
break;
case 52:

			this.$ = {
				tag: 'object',
				pairs: $$[$0-1],
				line: yylineno
			};
		
break;
case 53:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'variable',
					name: $$[$0-3],
					line: yylineno
				},
				operands: $$[$0-1],
				line: yylineno
			};
		
break;
case 54:

			this.$ = {
				tag: 'object_method_application',
				object: $$[$0-5],
				property: $$[$0-3],
				operands: $$[$0-1],
				line: yylineno
			};
		
break;
case 55:

			this.$ = {
				tag: 'construction',
				type: $$[$0-3],
				operands: $$[$0-1],
				line: yylineno
			};
		
break;
case 56:

			this.$ = {
				tag: 'function_definition',
				name: 'lambda',
				parameters: $$[$0-4],
				body: $$[$0-1],
				line: yylineno,
				location: {
					start_line: _$[$0-6].first_line,
					start_col: _$[$0-6].first_column,
					end_line: _$[$0].first_line,
					end_col: _$[$0].first_column
				}
			};
		
break;
case 57:

			this.$ = {
				tag: 'ternary',
				predicate: $$[$0-4],
				consequent: $$[$0-2],
				alternative: $$[$0],
				line: yylineno
			};
		
break;
case 58:
 this.$ = parseFloat(yytext); 
break;
case 59:
 this.$ = parseInt(yytext, 10); 
break;
case 60:
 this.$ = true; 
break;
case 61:
 this.$ = false; 
break;
case 63:
 this.$ = { tag: 'empty_list', line: yylineno }; 
break;
case 64:

		this.$ = '';
	
break;
case 66:

		switch (yytext)
		{
			case 'b':		this.$ = '\b'; break;
			case 'n':		this.$ = '\n'; break;
			case 'r':		this.$ = '\r'; break;
			case 't':		this.$ = '\t'; break;
			case "'":		this.$ = "'"; break;
			case '"':		this.$ = '"'; break;
			case '\\':		this.$ = '\\'; break;
			case '\n':
			case '\r\n':	this.$ = ''; break;
			default:		this.$ = '\\' + $$[$0]; break;
		}
	
break;
case 67:

		switch ($$[$0-1])
		{
			case 'b':		this.$ = '\b'; break;
			case 'n':		this.$ = '\n'; break;
			case 'r':		this.$ = '\r'; break;
			case 't':		this.$ = '\t'; break;
			case "'":		this.$ = "'"; break;
			case '"':		this.$ = '"'; break;
			case '\\':		this.$ = '\\'; break;
			case '\n':
			case '\r\n':	this.$ = ''; break;
			default:		this.$ = '\\' + $$[$0-1]; break;
		}
		this.$ += $$[$0];
	
break;
case 68:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 69: case 73: case 78:
 this.$ = $$[$0]; 
break;
case 71: case 75: case 77: case 80:
 this.$ = [ $$[$0-2], $$[$0] ]; 
break;
case 72: case 76: case 81:
 this.$ = [ $$[$0], [] ]; 
break;
case 82:
 this.$ = yytext; 
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1,7:4,8:$V2,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{1:[3]},{5:[1,38]},o($Vq,[2,3]),o($Vq,$V0,{7:4,10:6,11:7,12:8,18:10,19:11,20:12,49:24,14:25,59:32,4:39,6:$V1,8:$V2,13:$V3,15:$V4,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp}),{4:40,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:44,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,51:41,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,66:42,67:43,69:$Vp},o($Vr,[2,6]),o($Vr,[2,7]),o($Vr,[2,8]),{14:45,15:$Vs,69:$Vp},o($Vr,[2,10]),{6:[1,47]},{6:[1,48],25:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},{8:$VK,13:$VL,14:25,15:$V4,20:66,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{6:[1,69]},{6:[1,70]},{15:[1,71]},{15:[1,72]},{15:[1,73]},{14:74,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:75,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:76,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:77,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:78,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},o($VM,[2,48]),o($VM,$VN,{15:$VO}),{8:$VK,13:$VL,14:25,15:$V4,20:82,32:$Vc,33:$Vd,37:$Ve,46:$Vf,47:$VP,49:24,50:80,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:81,69:$Vp},{14:83,69:$Vp},o($VM,[2,58]),o($VM,[2,59]),o($VM,[2,60]),o($VM,[2,61]),o($VM,[2,62]),o($VM,[2,63]),o([6,9,15,17,25,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,53,54,65],[2,82]),o($VM,[2,64]),o($VM,[2,65],{59:84,61:$Vm,62:$Vn,63:$Vo}),o($VM,[2,66],{59:85,61:$Vm,62:$Vn,63:$Vo}),{1:[2,1]},o($Vq,[2,4]),{9:[1,86]},{9:[1,87]},{9:[2,73]},{9:[2,76],65:[1,88]},o([6,25,32,33,34,35,36,38,39,40,41,42,43,44,45,46,48,53],$VN,{15:$VO,54:$VQ}),{15:[1,90]},{14:93,16:91,17:$VR,68:92,69:$Vp},o($Vr,[2,11]),o($Vr,[2,12]),{8:$VK,13:$VL,14:25,15:$V4,20:94,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:95,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:96,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:97,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:98,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:99,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:100,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:101,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:102,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:103,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:104,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:105,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:106,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:107,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:108,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{14:109,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:110,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{6:[1,111],32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},{9:[2,74],14:112,51:41,66:42,67:43,69:$Vp},{15:$Vs},o($Vr,[2,14]),o($Vr,[2,15]),{8:$VK,13:$VL,14:25,15:$V4,20:113,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:114,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{6:[1,119],8:$VK,13:$VL,14:25,15:$V4,18:117,19:118,20:116,24:$V8,30:115,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{25:[1,120]},o($VS,[2,34],{46:$VH,48:$VI}),o($VS,[2,35],{46:$VH,48:$VI}),o($VS,[2,36],{46:$VH,48:$VI}),{17:[1,121],32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},{8:$VK,13:$VL,14:25,15:$V4,17:$VP,20:82,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,50:122,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:81,69:$Vp},{47:[1,123]},o($VT,[2,69]),o($VT,[2,72],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ,65:[1,124]}),{15:[1,125]},o($VM,[2,68]),o($VM,[2,67]),o($Vq,[2,5]),o($VM,[2,52]),{14:112,66:126,67:43,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:127,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{14:93,16:128,17:$VR,68:92,69:$Vp},{17:[1,129]},{17:[2,78]},{17:[2,81],65:[1,130]},o([6,17],[2,17],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ}),o($VU,[2,29],{34:$Vw,35:$Vx,36:$Vy,46:$VH,48:$VI}),o($VU,[2,30],{34:$Vw,35:$Vx,36:$Vy,46:$VH,48:$VI}),o($VS,[2,31],{46:$VH,48:$VI}),o($VS,[2,32],{46:$VH,48:$VI}),o($VS,[2,33],{46:$VH,48:$VI}),o([6,9,17,25,38,39,47,53,54,65],[2,37],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI}),o([6,9,17,25,39,47,53,54,65],[2,38],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI}),o($VV,[2,39],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI}),o($VV,[2,40],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI}),o($VW,[2,41],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,46:$VH,48:$VI}),o($VW,[2,42],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,46:$VH,48:$VI}),o($VW,[2,43],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,46:$VH,48:$VI}),o($VW,[2,44],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,46:$VH,48:$VI}),{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:[1,131],48:$VI,53:$VJ},o($VM,[2,46],{15:[1,132]}),{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ,54:[1,133]},o($Vr,[2,13]),{54:$VQ},{17:[1,134],32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},{17:[1,135],32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},{8:$VK,13:$VL,14:25,15:$V4,20:136,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{6:[1,137],25:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},o($VX,[2,23]),{6:[1,138]},o($VX,[2,25]),{8:$VK,13:$VL,14:25,15:$V4,20:139,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},o($VM,[2,47],{15:[1,140]}),{17:[1,141]},o($VM,[2,51]),{8:$VK,13:$VL,14:25,15:$V4,20:82,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:142,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,17:$VP,20:82,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,50:143,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:81,69:$Vp},{9:[2,75]},o([9,65],[2,77],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ}),{17:[1,144]},{8:[1,145]},{14:93,68:146,69:$Vp},o($VM,[2,45]),{8:$VK,13:$VL,14:25,15:$V4,17:$VP,20:82,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,50:147,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:81,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,20:148,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:[1,149]},{8:[1,150]},{6:[1,151],32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},o($VX,[2,22]),o($VX,[2,24]),{6:[1,152],32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},{8:$VK,13:$VL,14:25,15:$V4,17:$VP,20:82,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,50:153,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:81,69:$Vp},o($VM,[2,53]),o($VT,[2,71]),{17:[1,154]},{8:[1,155]},{4:156,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{17:[2,80]},{17:[1,157]},o([6,9,17,25,47,54,65],[2,57],{32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ}),{4:158,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{4:159,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{8:$VK,13:$VL,14:25,15:$V4,17:[2,28],19:161,20:162,31:160,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},o($Vr,[2,16]),{17:[1,163]},o($VM,[2,55]),{4:164,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{9:[1,165]},o($VM,[2,54]),{9:[1,166]},{9:[1,167]},{17:[1,168]},{17:[2,26]},{17:[2,27],25:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,48:$VI,53:$VJ},o($VM,[2,50]),{9:[1,169]},o($VM,[2,56]),{27:[1,170]},o($Vr,[2,20]),{8:[1,171]},o($Vr,[2,9]),{8:[1,172],10:173,26:$V9},{4:174,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},{4:175,6:$V1,7:4,8:$V2,9:$V0,10:6,11:7,12:8,13:$V3,14:25,15:$V4,18:10,19:11,20:12,21:$V5,22:$V6,23:$V7,24:$V8,26:$V9,28:$Va,29:$Vb,32:$Vc,33:$Vd,37:$Ve,46:$Vf,49:24,52:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:32,60:$Vl,61:$Vm,62:$Vn,63:$Vo,69:$Vp},o($Vr,[2,19]),{9:[1,176]},{9:[1,177]},o($Vr,[2,21]),o($Vr,[2,18])],
defaultActions: {38:[2,1],42:[2,73],92:[2,78],126:[2,75],146:[2,80],161:[2,26]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else if (hash.loc && hash.line) {
        throw new SyntaxError(str, hash.loc, hash.line);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip single-line comments */
break;
case 1:/* skip multi-line comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 13
break;
case 4:return 21
break;
case 5:return 26
break;
case 6:return 27
break;
case 7:return 28
break;
case 8:return 29
break;
case 9:return 'case'
break;
case 10:return 'default'
break;
case 11:return 52
break;
case 12:return 22
break;
case 13:return 23
break;
case 14:return 24
break;
case 15:return 40
break;
case 16:return 25
break;
case 17:return 8
break;
case 18:return 9
break;
case 19:return 6
break;
case 20:return 65
break;
case 21:return 57
break;
case 22:return 58
break;
case 23:return 60
break;
case 24:return 46
break;
case 25:return 47
break;
case 26:return 48
break;
case 27:return 61
break;
case 28:return 61
break;
case 29:this.begin('DoubleQuotedString');
break;
case 30:this.begin('SingleQuotedString');
break;
case 31:this.begin('QuotedStringEscape');
break;
case 32:this.popState();
break;
case 33:this.popState();
break;
case 34: this.popState(); return 63; 
break;
case 35:return 62;
break;
case 36:return 62;
break;
case 37:return 69 /* TODO: non-ASCII identifiers */
break;
case 38:return 55 /* 3.1, 3.1e-7 */
break;
case 39:return 56
break;
case 40:return 32
break;
case 41:return 33
break;
case 42:return 34
break;
case 43:return 35
break;
case 44:return 36
break;
case 45:return 41
break;
case 46:return 45
break;
case 47:return 44
break;
case 48:return 43
break;
case 49:return 42
break;
case 50:return 37
break;
case 51:return 38
break;
case 52:return 39
break;
case 53:return 15
break;
case 54:return 17
break;
case 55:return 53
break;
case 56:return 54
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/([^\n\r]*))/,/^(?:\/\*([\u0000-\uffff]*?)\*\/)/,/^(?:\s+)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:new\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:var\b)/,/^(?:===)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:tru\b)/,/^(?:false\b)/,/^(?:\[\])/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:"")/,/^(?:'')/,/^(?:")/,/^(?:')/,/^(?:\\)/,/^(?:")/,/^(?:')/,/^(?:(.|\r\n|\n))/,/^(?:[^"\\]*)/,/^(?:[^'\\]*)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?([eE][\-+]?[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"QuotedStringEscape":{"rules":[34],"inclusive":false},"SingleQuotedString":{"rules":[31,33,36],"inclusive":false},"DoubleQuotedString":{"rules":[31,32,35],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
}
